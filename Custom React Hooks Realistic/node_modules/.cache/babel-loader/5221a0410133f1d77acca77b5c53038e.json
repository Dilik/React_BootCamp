{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/1989deny/Desktop/React_BootCamp/Custom React Hooks Realistic/src/hooks/use-http.js"],"names":["useCallback","useState","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,WAAW,GAAGP,WAAW,CAAC,OAAOQ,aAAP,EAAsBC,SAAtB,KAAoC;AAChEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CACxBH,aAAa,CAACI,GADU,EACL;AACfC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADvC;AAEfC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,EAF1C;AAGfC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAArB,GAA0D;AAHjD,OADK,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AAEH,KAjBD,CAiBE,OAAOE,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAxB8B,EAwB5B,EAxB4B,CAA/B;AA0BA,SAAM;AACFD,IAAAA,SADE;AAEFE,IAAAA,KAFE;AAGFE,IAAAA;AAHE,GAAN;AAKH,CAnCD;;GAAML,O;;AAqCN,eAAeA,OAAf","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useHttp = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const sendRequest = useCallback(async (requestConfig, applyData) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await fetch(\n                requestConfig.url, {\n                    method: requestConfig.method ? requestConfig.method : 'GET',\n                    headers: requestConfig.headers ? requestConfig.headers : {},\n                    body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n                }\n            );\n\n            if (!response.ok) {\n                throw new Error('Request failed!');\n            }\n\n            const data = await response.json();\n\n            applyData(data);\n\n        } catch (err) {\n            setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    }, []);\n\n    return{\n        isLoading,\n        error,\n        sendRequest\n    }\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}